/***************************************************
File:           LPK_ScreenRefract.shader
Authors:        Christopher Onorati
Last Updated:   3/22/2019
Last Version:   2018.3.4

Description:
Shader to create refractive sprites for ice or distortion
ring-like effects.

This shader uses the RT texture generated in
LPK_ScreenSpaceRefractions and will do next to nothing
without a proper setup.

Copyright 2018-2019, DigiPen Institute of Technology
***************************************************/

Shader "LPK/LPK_ScreenRefract"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _DistortionTexture("Refraction Normal Map", 2D) = "white" {}
    }

    SubShader
    {
        Cull Off
        ZWrite Off
        Blend SrcAlpha OneMinusSrcAlpha

        Tags
        {
            "Queue" = "Transparent"
            "PreviewType" = "Plane"
            "DisableBatching" = "True"
        }

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                half4 color : COLOR;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float2 screenuv : TEXCOORD1;
                half4 color : COLOR;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                o.screenuv = ((o.vertex.xy / o.vertex.w) + 1) * 0.5;
                o.color = v.color;
                return o;
            }

            //Real time texture generated by cameras that have LPK_ScreenSpaceRefractions.
            uniform sampler2D _RTScreenSpaceRefractions;

            //Offset texture for distortions.
            sampler2D _DistortionTexture;

            //Texture of the sprite.
            sampler2D _MainTex;

            //Prevent against strange edge effect.
            float _OffsetMagnitude = 0.03;

            fixed4 frag (v2f i) : SV_Target
            {
                float4 color = tex2D(_MainTex, i.uv) * i.color;
                float2 distort = mul(unity_ObjectToWorld, tex2D(_DistortionTexture, i.uv).xy * 2 - 1);

                //Reflection.
                float4 reflection = tex2D(_RTScreenSpaceRefractions, i.screenuv + distort * 0.04);
                color.rgb = color.rgb * (1.0 - reflection.a) + reflection.rgb * reflection.a;

                return color;
            }
            ENDCG
        }
    }
}
